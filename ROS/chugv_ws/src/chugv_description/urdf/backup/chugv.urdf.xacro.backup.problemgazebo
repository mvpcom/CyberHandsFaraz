<?xml version="1.0"?>
<robot name="chugv" xmlns:xacro="http://www.ros.org/wiki/xacro">
 
  <!-- Included URDF/XACRO Files -->
  <xacro:include filename="$(find chugv_description)/urdf/materials.urdf.xacro" />
  <xacro:include filename="$(find chugv_description)/urdf/wheel.urdf.xacro" />
 
 <!--xacro:include filename="$(find chugv_description)/urdf/sensors/hokuyo.urdf.xacro"/-->



  <!-- PROPERTY LIST -->
  <!--All units in m-kg-s-radians unit system -->
  <property name="M_PI" value="3.1415926535897931" />
 
  <!-- Main Body-base -->
  <property name="base_x_size" value="1" /> <!-- 1.0 0.5 0.25-->
  <property name="base_y_size" value="0.5" /> <!-- 1.25 0.82 0.42 --> 
  <property name="base_z_size" value="0.25" />
  <property name="base_mass" value="35" /> <!-- in kg--> <!-- 35 -->

 
  <property name="camera_link" value="0.05" /> <!-- Size of square 'camera' box -->
 
  <!--Inertial macros for the box and cylinder. Units are kg*m^2-->
  <macro name="box_inertia" params="m x y z">
    <inertia  ixx="${m*(y*y+z*z)/12}" ixy = "0" ixz = "0"
              iyy="${m*(x*x+z*z)/12}" iyz = "0"
              izz="${m*(x*x+z*z)/12}" /> 
  </macro>
 
  <!-- BASE-FOOTPRINT -->
  <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin -->
  <link name="base_footprint">
    <inertial>
      <mass value="0.0001" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
          iyy="0.0001" iyz="0.0" 
          izz="0.0001" />
    </inertial>
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="0.001 0.001 0.001" />
        </geometry>
    </visual>
  </link>
 
  <gazebo reference="base_footprint">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
 
  <joint name="base_footprint_joint" type="fixed">
  <origin xyz="0 0 ${wheel_radius - base_z_origin_to_wheel_origin}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="base_link" />
  </joint>
 
  <!-- BASE-LINK -->
  <!--Actual body/chassis of the robot-->
  <link name="base_link">
    <inertial>
      <mass value="${base_mass}" />
      <origin xyz="0 0 0" />
      <!--The 3x3 rotational inertia matrix. -->
      <box_inertia  m="${base_mass}" x="${base_x_size}" y="${base_y_size}" z="${base_z_size}"/> 
    </inertial>    
    <visual>
      <!--origin xyz="0 0 0" rpy="0 0 0" /-->
      <origin xyz="0.05 0 -0.095" rpy="0 0 0" />  
      <!-- 0.35 0.3129348 0.2671349 -->
      <geometry>
      <mesh filename="package://chugv_description/meshes/chugv.dae"/>
        <!--box size="${base_x_size} ${base_y_size} ${base_z_size}"/--> <!-- 1 0.5 0.25-->
      </geometry>
      <material name="Red" /> <!-- Yellow -->
    </visual>  
    <collision>
      <!--origin xyz="0 0 0" rpy="0 0 0" /-->
      <!--origin xyz="0 0 0.17" rpy="0 0 0 " /-->
      <origin xyz="0.08 0 -0.095" rpy="0 0 0" />  
      <geometry>
<mesh filename="package://ch_description/meshes/chugv_coll.dae"/>
        <!--box size="${base_x_size} ${base_y_size} ${base_z_size}"/--> <!-- 1 0.5 0.25 -->
      </geometry>
    </collision>     
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Red</material> 	<!-- Yellow -->
    <turnGravityOff>false</turnGravityOff>
  </gazebo>
 
  <!-- WHEELs -->
  <wheel fb="front" lr="right" parent="base_link" translateX="1" translateY="-1" flipY="-1"/>
  <wheel fb="front" lr="left" parent="base_link" translateX="1" translateY="1" flipY="-1"/>
  <wheel fb="back" lr="right" parent="base_link" translateX="-1" translateY="-1" flipY="-1"/>
  <wheel fb="back" lr="left" parent="base_link" translateX="-1" translateY="1" flipY="-1"/>
 

  <!-- sensor -->
<!--sensor_hokuyo parent="base_link"/-->

<!--gazebo>
      <include>
        <uri>model://kinect</uri>
        <pose>0.25 0 0.42 0 0 0</pose>
      </include>
      <joint name="centercam" type="revolute">
        <child>kinect::link</child>
        <parent>base_link</parent>
        <axis>
          <xyz>1 1 1</xyz>
          <limit>
            <upper>0</upper>
            <lower>0</lower>
          </limit>
        </axis>
      </joint>
</gazebo-->


<!-- 0.24 0 0.102 0 0 0 -->
<gazebo>
      <include>
        <uri>model://hokuyo</uri>
        <pose>0.20 0 0.52 0 0 0</pose> 
      </include>
      <joint name="hokuyo_joint" type="revolute">
        <child>hokuyo::link</child>
        <parent>base_link</parent>
        <axis>
          <xyz>0 0 1</xyz>
          <limit>
            <upper>0</upper>
            <lower>0</lower>
          </limit>
        </axis>
      </joint>
</gazebo>

<!--include>
<uri>model://hokuyo</uri>
<pose>0.24 0 0.102 0 0 0</pose>
</include-->

<!--joint name="hokuyo_joint" type="revolute">
<child>hokuyo::link</child>
<parent>chassis</parent>
<axis>
<xyz>0 0 1</xyz>
<limit>
<upper>0</upper>
<lower>0</lower>
</limit>
</axis>
</joint-->
 <!--joint name="hokuyo_joint" type="fixed">
   <axis xyz="0 0 1" />
   <origin xyz="0 0.17 0.32" rpy="0 0 1.570796"/>
   <parent link="base_link"/>
   <child link="hokuyo::link"/>
 </joint-->


  <!-- Camera -->
  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="${base_x_size/2-camera_link/2+0.09} 0 ${base_z_size/2 + camera_link/2+0.18}" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="camera_link"/>
  </joint>
 
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
		<box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>
 
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
		<box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <material name="black"/>
    </visual>
 
    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

<!-- Costume Plugin -->
<!--plugin name="robot_0_plugin.cc" filename="$(find chugv_control)/plugin/build/librosplugin.so"/-->


<!-- Controller Plugin + Keyboard + JS + RQT -->
  <gazebo>
    <plugin name="skid_steer_drive_controller" filename="libgazebo_ros_skid_steer_drive.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>100.0</updateRate>
      <leftFrontJoint>front_left_wheel_joint</leftFrontJoint>
      <rightFrontJoint>front_right_wheel_joint</rightFrontJoint>
      <leftRearJoint>back_left_wheel_joint</leftRearJoint>
      <rightRearJoint>back_right_wheel_joint</rightRearJoint>
      <wheelSeparation>${base_y_size}</wheelSeparation>
      <wheelDiameter>${2*wheel_radius}</wheelDiameter>
      <torque>35</torque>
      <broadcastTF>1</broadcastTF>
      <odometryFrame>map</odometryFrame>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <robotBaseFrame>base_footprint</robotBaseFrame>
    </plugin>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so" />
  </gazebo>

  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.  
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>chugv/camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
